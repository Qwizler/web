/**
 * @fileoverview gRPC-Web generated client stub for quiz.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.3
// source: quizzes.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as quizzes_pb from './quizzes_pb'; // proto import: "quizzes.proto"


export class QuizzesClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateQuiz = new grpcWeb.MethodDescriptor(
    '/quiz.v1.Quizzes/CreateQuiz',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.CreateQuizRequest,
    quizzes_pb.CreateQuizResponse,
    (request: quizzes_pb.CreateQuizRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.CreateQuizResponse.deserializeBinary
  );

  createQuiz(
    request: quizzes_pb.CreateQuizRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.CreateQuizResponse>;

  createQuiz(
    request: quizzes_pb.CreateQuizRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.CreateQuizResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.CreateQuizResponse>;

  createQuiz(
    request: quizzes_pb.CreateQuizRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.CreateQuizResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.Quizzes/CreateQuiz',
        request,
        metadata || {},
        this.methodDescriptorCreateQuiz,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.Quizzes/CreateQuiz',
    request,
    metadata || {},
    this.methodDescriptorCreateQuiz);
  }

  methodDescriptorGetQuiz = new grpcWeb.MethodDescriptor(
    '/quiz.v1.Quizzes/GetQuiz',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.GetQuizRequest,
    quizzes_pb.GetQuizResponse,
    (request: quizzes_pb.GetQuizRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.GetQuizResponse.deserializeBinary
  );

  getQuiz(
    request: quizzes_pb.GetQuizRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.GetQuizResponse>;

  getQuiz(
    request: quizzes_pb.GetQuizRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.GetQuizResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.GetQuizResponse>;

  getQuiz(
    request: quizzes_pb.GetQuizRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.GetQuizResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.Quizzes/GetQuiz',
        request,
        metadata || {},
        this.methodDescriptorGetQuiz,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.Quizzes/GetQuiz',
    request,
    metadata || {},
    this.methodDescriptorGetQuiz);
  }

  methodDescriptorListQuiz = new grpcWeb.MethodDescriptor(
    '/quiz.v1.Quizzes/ListQuiz',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.ListQuizRequest,
    quizzes_pb.ListQuizResponse,
    (request: quizzes_pb.ListQuizRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.ListQuizResponse.deserializeBinary
  );

  listQuiz(
    request: quizzes_pb.ListQuizRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.ListQuizResponse>;

  listQuiz(
    request: quizzes_pb.ListQuizRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.ListQuizResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.ListQuizResponse>;

  listQuiz(
    request: quizzes_pb.ListQuizRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.ListQuizResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.Quizzes/ListQuiz',
        request,
        metadata || {},
        this.methodDescriptorListQuiz,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.Quizzes/ListQuiz',
    request,
    metadata || {},
    this.methodDescriptorListQuiz);
  }

  methodDescriptorUpdateQuiz = new grpcWeb.MethodDescriptor(
    '/quiz.v1.Quizzes/UpdateQuiz',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.UpdateQuizRequest,
    quizzes_pb.UpdateQuizResponse,
    (request: quizzes_pb.UpdateQuizRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.UpdateQuizResponse.deserializeBinary
  );

  updateQuiz(
    request: quizzes_pb.UpdateQuizRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.UpdateQuizResponse>;

  updateQuiz(
    request: quizzes_pb.UpdateQuizRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.UpdateQuizResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.UpdateQuizResponse>;

  updateQuiz(
    request: quizzes_pb.UpdateQuizRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.UpdateQuizResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.Quizzes/UpdateQuiz',
        request,
        metadata || {},
        this.methodDescriptorUpdateQuiz,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.Quizzes/UpdateQuiz',
    request,
    metadata || {},
    this.methodDescriptorUpdateQuiz);
  }

  methodDescriptorDeleteQuiz = new grpcWeb.MethodDescriptor(
    '/quiz.v1.Quizzes/DeleteQuiz',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.DeleteQuizRequest,
    quizzes_pb.DeleteQuizResponse,
    (request: quizzes_pb.DeleteQuizRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.DeleteQuizResponse.deserializeBinary
  );

  deleteQuiz(
    request: quizzes_pb.DeleteQuizRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.DeleteQuizResponse>;

  deleteQuiz(
    request: quizzes_pb.DeleteQuizRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.DeleteQuizResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.DeleteQuizResponse>;

  deleteQuiz(
    request: quizzes_pb.DeleteQuizRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.DeleteQuizResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.Quizzes/DeleteQuiz',
        request,
        metadata || {},
        this.methodDescriptorDeleteQuiz,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.Quizzes/DeleteQuiz',
    request,
    metadata || {},
    this.methodDescriptorDeleteQuiz);
  }

  methodDescriptorSearchQuiz = new grpcWeb.MethodDescriptor(
    '/quiz.v1.Quizzes/SearchQuiz',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.SearchQuizRequest,
    quizzes_pb.SearchQuizResponse,
    (request: quizzes_pb.SearchQuizRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.SearchQuizResponse.deserializeBinary
  );

  searchQuiz(
    request: quizzes_pb.SearchQuizRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.SearchQuizResponse>;

  searchQuiz(
    request: quizzes_pb.SearchQuizRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.SearchQuizResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.SearchQuizResponse>;

  searchQuiz(
    request: quizzes_pb.SearchQuizRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.SearchQuizResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.Quizzes/SearchQuiz',
        request,
        metadata || {},
        this.methodDescriptorSearchQuiz,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.Quizzes/SearchQuiz',
    request,
    metadata || {},
    this.methodDescriptorSearchQuiz);
  }

}

export class QuizQuestionsClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddQuestion = new grpcWeb.MethodDescriptor(
    '/quiz.v1.QuizQuestions/AddQuestion',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.AddQuestionRequest,
    quizzes_pb.AddQuestionResponse,
    (request: quizzes_pb.AddQuestionRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.AddQuestionResponse.deserializeBinary
  );

  addQuestion(
    request: quizzes_pb.AddQuestionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.AddQuestionResponse>;

  addQuestion(
    request: quizzes_pb.AddQuestionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.AddQuestionResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.AddQuestionResponse>;

  addQuestion(
    request: quizzes_pb.AddQuestionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.AddQuestionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.QuizQuestions/AddQuestion',
        request,
        metadata || {},
        this.methodDescriptorAddQuestion,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.QuizQuestions/AddQuestion',
    request,
    metadata || {},
    this.methodDescriptorAddQuestion);
  }

  methodDescriptorUpdateQuestion = new grpcWeb.MethodDescriptor(
    '/quiz.v1.QuizQuestions/UpdateQuestion',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.UpdateQuestionRequest,
    quizzes_pb.UpdateQuestionResponse,
    (request: quizzes_pb.UpdateQuestionRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.UpdateQuestionResponse.deserializeBinary
  );

  updateQuestion(
    request: quizzes_pb.UpdateQuestionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.UpdateQuestionResponse>;

  updateQuestion(
    request: quizzes_pb.UpdateQuestionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.UpdateQuestionResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.UpdateQuestionResponse>;

  updateQuestion(
    request: quizzes_pb.UpdateQuestionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.UpdateQuestionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.QuizQuestions/UpdateQuestion',
        request,
        metadata || {},
        this.methodDescriptorUpdateQuestion,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.QuizQuestions/UpdateQuestion',
    request,
    metadata || {},
    this.methodDescriptorUpdateQuestion);
  }

  methodDescriptorDeleteQuestion = new grpcWeb.MethodDescriptor(
    '/quiz.v1.QuizQuestions/DeleteQuestion',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.DeleteQuestionRequest,
    quizzes_pb.DeleteQuestionResponse,
    (request: quizzes_pb.DeleteQuestionRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.DeleteQuestionResponse.deserializeBinary
  );

  deleteQuestion(
    request: quizzes_pb.DeleteQuestionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.DeleteQuestionResponse>;

  deleteQuestion(
    request: quizzes_pb.DeleteQuestionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.DeleteQuestionResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.DeleteQuestionResponse>;

  deleteQuestion(
    request: quizzes_pb.DeleteQuestionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.DeleteQuestionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.QuizQuestions/DeleteQuestion',
        request,
        metadata || {},
        this.methodDescriptorDeleteQuestion,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.QuizQuestions/DeleteQuestion',
    request,
    metadata || {},
    this.methodDescriptorDeleteQuestion);
  }

  methodDescriptorListQuestion = new grpcWeb.MethodDescriptor(
    '/quiz.v1.QuizQuestions/ListQuestion',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.ListQuestionRequest,
    quizzes_pb.ListQuestionResponse,
    (request: quizzes_pb.ListQuestionRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.ListQuestionResponse.deserializeBinary
  );

  listQuestion(
    request: quizzes_pb.ListQuestionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.ListQuestionResponse>;

  listQuestion(
    request: quizzes_pb.ListQuestionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.ListQuestionResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.ListQuestionResponse>;

  listQuestion(
    request: quizzes_pb.ListQuestionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.ListQuestionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.QuizQuestions/ListQuestion',
        request,
        metadata || {},
        this.methodDescriptorListQuestion,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.QuizQuestions/ListQuestion',
    request,
    metadata || {},
    this.methodDescriptorListQuestion);
  }

}

export class QuizAnswersClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorValidateQuestionAnswers = new grpcWeb.MethodDescriptor(
    '/quiz.v1.QuizAnswers/ValidateQuestionAnswers',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.ValidateQuestionAnswersRequest,
    quizzes_pb.ValidateQuestionAnswersResponse,
    (request: quizzes_pb.ValidateQuestionAnswersRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.ValidateQuestionAnswersResponse.deserializeBinary
  );

  validateQuestionAnswers(
    request: quizzes_pb.ValidateQuestionAnswersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.ValidateQuestionAnswersResponse>;

  validateQuestionAnswers(
    request: quizzes_pb.ValidateQuestionAnswersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.ValidateQuestionAnswersResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.ValidateQuestionAnswersResponse>;

  validateQuestionAnswers(
    request: quizzes_pb.ValidateQuestionAnswersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.ValidateQuestionAnswersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.QuizAnswers/ValidateQuestionAnswers',
        request,
        metadata || {},
        this.methodDescriptorValidateQuestionAnswers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.QuizAnswers/ValidateQuestionAnswers',
    request,
    metadata || {},
    this.methodDescriptorValidateQuestionAnswers);
  }

  methodDescriptorCreateChoice = new grpcWeb.MethodDescriptor(
    '/quiz.v1.QuizAnswers/CreateChoice',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.CreateChoiceRequest,
    quizzes_pb.CreateChoiceResponse,
    (request: quizzes_pb.CreateChoiceRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.CreateChoiceResponse.deserializeBinary
  );

  createChoice(
    request: quizzes_pb.CreateChoiceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.CreateChoiceResponse>;

  createChoice(
    request: quizzes_pb.CreateChoiceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.CreateChoiceResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.CreateChoiceResponse>;

  createChoice(
    request: quizzes_pb.CreateChoiceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.CreateChoiceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.QuizAnswers/CreateChoice',
        request,
        metadata || {},
        this.methodDescriptorCreateChoice,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.QuizAnswers/CreateChoice',
    request,
    metadata || {},
    this.methodDescriptorCreateChoice);
  }

  methodDescriptorUpdateChoice = new grpcWeb.MethodDescriptor(
    '/quiz.v1.QuizAnswers/UpdateChoice',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.UpdateChoiceRequest,
    quizzes_pb.UpdateChoiceResponse,
    (request: quizzes_pb.UpdateChoiceRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.UpdateChoiceResponse.deserializeBinary
  );

  updateChoice(
    request: quizzes_pb.UpdateChoiceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.UpdateChoiceResponse>;

  updateChoice(
    request: quizzes_pb.UpdateChoiceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.UpdateChoiceResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.UpdateChoiceResponse>;

  updateChoice(
    request: quizzes_pb.UpdateChoiceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.UpdateChoiceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.QuizAnswers/UpdateChoice',
        request,
        metadata || {},
        this.methodDescriptorUpdateChoice,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.QuizAnswers/UpdateChoice',
    request,
    metadata || {},
    this.methodDescriptorUpdateChoice);
  }

  methodDescriptorDeleteChoice = new grpcWeb.MethodDescriptor(
    '/quiz.v1.QuizAnswers/DeleteChoice',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.DeleteChoiceRequest,
    quizzes_pb.DeleteChoiceResponse,
    (request: quizzes_pb.DeleteChoiceRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.DeleteChoiceResponse.deserializeBinary
  );

  deleteChoice(
    request: quizzes_pb.DeleteChoiceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.DeleteChoiceResponse>;

  deleteChoice(
    request: quizzes_pb.DeleteChoiceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.DeleteChoiceResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.DeleteChoiceResponse>;

  deleteChoice(
    request: quizzes_pb.DeleteChoiceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.DeleteChoiceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.QuizAnswers/DeleteChoice',
        request,
        metadata || {},
        this.methodDescriptorDeleteChoice,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.QuizAnswers/DeleteChoice',
    request,
    metadata || {},
    this.methodDescriptorDeleteChoice);
  }

  methodDescriptorListChoice = new grpcWeb.MethodDescriptor(
    '/quiz.v1.QuizAnswers/ListChoice',
    grpcWeb.MethodType.UNARY,
    quizzes_pb.ListChoiceRequest,
    quizzes_pb.ListChoiceResponse,
    (request: quizzes_pb.ListChoiceRequest) => {
      return request.serializeBinary();
    },
    quizzes_pb.ListChoiceResponse.deserializeBinary
  );

  listChoice(
    request: quizzes_pb.ListChoiceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<quizzes_pb.ListChoiceResponse>;

  listChoice(
    request: quizzes_pb.ListChoiceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: quizzes_pb.ListChoiceResponse) => void): grpcWeb.ClientReadableStream<quizzes_pb.ListChoiceResponse>;

  listChoice(
    request: quizzes_pb.ListChoiceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: quizzes_pb.ListChoiceResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/quiz.v1.QuizAnswers/ListChoice',
        request,
        metadata || {},
        this.methodDescriptorListChoice,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/quiz.v1.QuizAnswers/ListChoice',
    request,
    metadata || {},
    this.methodDescriptorListChoice);
  }

}

