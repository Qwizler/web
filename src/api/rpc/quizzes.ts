/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.3
 * source: quizzes.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/api/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace quiz.v1 {
    export enum Difficulty {
        EASY = 0,
        MEDIUM = 1,
        HARD = 2,
        EXPERT = 3
    }
    export class Audit extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2], [3]];
        constructor(data?: any[] | ({
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
        } & (({
            created_by?: string;
        }) | ({
            updated_by?: string;
        }) | ({
            deleted_by?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("created_by" in data && data.created_by != undefined) {
                    this.created_by = data.created_by;
                }
                if ("updated_by" in data && data.updated_by != undefined) {
                    this.updated_by = data.updated_by;
                }
                if ("deleted_by" in data && data.deleted_by != undefined) {
                    this.deleted_by = data.deleted_by;
                }
                if ("created_at" in data && data.created_at != undefined) {
                    this.created_at = data.created_at;
                }
                if ("updated_at" in data && data.updated_at != undefined) {
                    this.updated_at = data.updated_at;
                }
                if ("deleted_at" in data && data.deleted_at != undefined) {
                    this.deleted_at = data.deleted_at;
                }
            }
        }
        get created_by() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set created_by(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_created_by() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get updated_by() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set updated_by(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_updated_by() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get deleted_by() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set deleted_by(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
        }
        get has_deleted_by() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get created_at() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set created_at(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get updated_at() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set updated_at(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get deleted_at() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set deleted_at(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get _created_by() {
            const cases: {
                [index: number]: "none" | "created_by";
            } = {
                0: "none",
                1: "created_by"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _updated_by() {
            const cases: {
                [index: number]: "none" | "updated_by";
            } = {
                0: "none",
                2: "updated_by"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _deleted_by() {
            const cases: {
                [index: number]: "none" | "deleted_by";
            } = {
                0: "none",
                3: "deleted_by"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            created_by?: string;
            updated_by?: string;
            deleted_by?: string;
            created_at?: string;
            updated_at?: string;
            deleted_at?: string;
        }): Audit {
            const message = new Audit({});
            if (data.created_by != null) {
                message.created_by = data.created_by;
            }
            if (data.updated_by != null) {
                message.updated_by = data.updated_by;
            }
            if (data.deleted_by != null) {
                message.deleted_by = data.deleted_by;
            }
            if (data.created_at != null) {
                message.created_at = data.created_at;
            }
            if (data.updated_at != null) {
                message.updated_at = data.updated_at;
            }
            if (data.deleted_at != null) {
                message.deleted_at = data.deleted_at;
            }
            return message;
        }
        toObject() {
            const data: {
                created_by?: string;
                updated_by?: string;
                deleted_by?: string;
                created_at?: string;
                updated_at?: string;
                deleted_at?: string;
            } = {};
            if (this.created_by != null) {
                data.created_by = this.created_by;
            }
            if (this.updated_by != null) {
                data.updated_by = this.updated_by;
            }
            if (this.deleted_by != null) {
                data.deleted_by = this.deleted_by;
            }
            if (this.created_at != null) {
                data.created_at = this.created_at;
            }
            if (this.updated_at != null) {
                data.updated_at = this.updated_at;
            }
            if (this.deleted_at != null) {
                data.deleted_at = this.deleted_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_created_by)
                writer.writeString(1, this.created_by);
            if (this.has_updated_by)
                writer.writeString(2, this.updated_by);
            if (this.has_deleted_by)
                writer.writeString(3, this.deleted_by);
            if (this.created_at.length)
                writer.writeString(4, this.created_at);
            if (this.updated_at.length)
                writer.writeString(5, this.updated_at);
            if (this.deleted_at.length)
                writer.writeString(6, this.deleted_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Audit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Audit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.created_by = reader.readString();
                        break;
                    case 2:
                        message.updated_by = reader.readString();
                        break;
                    case 3:
                        message.deleted_by = reader.readString();
                        break;
                    case 4:
                        message.created_at = reader.readString();
                        break;
                    case 5:
                        message.updated_at = reader.readString();
                        break;
                    case 6:
                        message.deleted_at = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Audit {
            return Audit.deserialize(bytes);
        }
    }
    export class Pagination extends pb_1.Message {
        #one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            page?: number;
        }) | ({
            page_size?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("page" in data && data.page != undefined) {
                    this.page = data.page;
                }
                if ("page_size" in data && data.page_size != undefined) {
                    this.page_size = data.page_size;
                }
            }
        }
        get page() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set page(value: number) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_page() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get page_size() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set page_size(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
        }
        get has_page_size() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _page() {
            const cases: {
                [index: number]: "none" | "page";
            } = {
                0: "none",
                1: "page"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _page_size() {
            const cases: {
                [index: number]: "none" | "page_size";
            } = {
                0: "none",
                2: "page_size"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            page?: number;
            page_size?: number;
        }): Pagination {
            const message = new Pagination({});
            if (data.page != null) {
                message.page = data.page;
            }
            if (data.page_size != null) {
                message.page_size = data.page_size;
            }
            return message;
        }
        toObject() {
            const data: {
                page?: number;
                page_size?: number;
            } = {};
            if (this.page != null) {
                data.page = this.page;
            }
            if (this.page_size != null) {
                data.page_size = this.page_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_page)
                writer.writeInt32(1, this.page);
            if (this.has_page_size)
                writer.writeInt32(2, this.page_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pagination {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pagination();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.page = reader.readInt32();
                        break;
                    case 2:
                        message.page_size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Pagination {
            return Pagination.deserialize(bytes);
        }
    }
    export class Choice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            choice?: string;
            order?: number;
            is_correct?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("choice" in data && data.choice != undefined) {
                    this.choice = data.choice;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
                if ("is_correct" in data && data.is_correct != undefined) {
                    this.is_correct = data.is_correct;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get choice() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set choice(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get order() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set order(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_correct() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set is_correct(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            choice?: string;
            order?: number;
            is_correct?: boolean;
        }): Choice {
            const message = new Choice({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.choice != null) {
                message.choice = data.choice;
            }
            if (data.order != null) {
                message.order = data.order;
            }
            if (data.is_correct != null) {
                message.is_correct = data.is_correct;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                choice?: string;
                order?: number;
                is_correct?: boolean;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.choice != null) {
                data.choice = this.choice;
            }
            if (this.order != null) {
                data.order = this.order;
            }
            if (this.is_correct != null) {
                data.is_correct = this.is_correct;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.choice.length)
                writer.writeString(2, this.choice);
            if (this.order != 0)
                writer.writeFloat(3, this.order);
            if (this.is_correct != false)
                writer.writeBool(4, this.is_correct);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Choice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Choice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.choice = reader.readString();
                        break;
                    case 3:
                        message.order = reader.readFloat();
                        break;
                    case 4:
                        message.is_correct = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Choice {
            return Choice.deserialize(bytes);
        }
    }
    export class QuizQuestion extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            question?: string;
            answers?: string[];
            correct_answer?: number;
            difficulty?: Difficulty;
            audit?: Audit;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("question" in data && data.question != undefined) {
                    this.question = data.question;
                }
                if ("answers" in data && data.answers != undefined) {
                    this.answers = data.answers;
                }
                if ("correct_answer" in data && data.correct_answer != undefined) {
                    this.correct_answer = data.correct_answer;
                }
                if ("difficulty" in data && data.difficulty != undefined) {
                    this.difficulty = data.difficulty;
                }
                if ("audit" in data && data.audit != undefined) {
                    this.audit = data.audit;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get answers() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set answers(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get correct_answer() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set correct_answer(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get difficulty() {
            return pb_1.Message.getFieldWithDefault(this, 5, Difficulty.EASY) as Difficulty;
        }
        set difficulty(value: Difficulty) {
            pb_1.Message.setField(this, 5, value);
        }
        get audit() {
            return pb_1.Message.getWrapperField(this, Audit, 6) as Audit;
        }
        set audit(value: Audit) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_audit() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            id?: string;
            question?: string;
            answers?: string[];
            correct_answer?: number;
            difficulty?: Difficulty;
            audit?: ReturnType<typeof Audit.prototype.toObject>;
        }): QuizQuestion {
            const message = new QuizQuestion({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.question != null) {
                message.question = data.question;
            }
            if (data.answers != null) {
                message.answers = data.answers;
            }
            if (data.correct_answer != null) {
                message.correct_answer = data.correct_answer;
            }
            if (data.difficulty != null) {
                message.difficulty = data.difficulty;
            }
            if (data.audit != null) {
                message.audit = Audit.fromObject(data.audit);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                question?: string;
                answers?: string[];
                correct_answer?: number;
                difficulty?: Difficulty;
                audit?: ReturnType<typeof Audit.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.question != null) {
                data.question = this.question;
            }
            if (this.answers != null) {
                data.answers = this.answers;
            }
            if (this.correct_answer != null) {
                data.correct_answer = this.correct_answer;
            }
            if (this.difficulty != null) {
                data.difficulty = this.difficulty;
            }
            if (this.audit != null) {
                data.audit = this.audit.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.question.length)
                writer.writeString(2, this.question);
            if (this.answers.length)
                writer.writeRepeatedString(3, this.answers);
            if (this.correct_answer != 0)
                writer.writeUint32(4, this.correct_answer);
            if (this.difficulty != Difficulty.EASY)
                writer.writeEnum(5, this.difficulty);
            if (this.has_audit)
                writer.writeMessage(6, this.audit, () => this.audit.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuizQuestion {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuizQuestion();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.question = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.correct_answer = reader.readUint32();
                        break;
                    case 5:
                        message.difficulty = reader.readEnum();
                        break;
                    case 6:
                        reader.readMessage(message.audit, () => message.audit = Audit.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuizQuestion {
            return QuizQuestion.deserialize(bytes);
        }
    }
    export class Quiz extends pb_1.Message {
        #one_of_decls: number[][] = [[5], [6], [7], [8], [9]];
        constructor(data?: any[] | ({
            id?: string;
            user_id?: string;
            title?: string;
            description?: string;
            tags?: string[];
            metadata?: Map<string, string>;
            audit?: Audit;
        } & (({
            duration?: number;
        }) | ({
            difficulty?: Difficulty;
        }) | ({
            thumbnail?: string;
        }) | ({
            cover?: string;
        }) | ({
            category?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("difficulty" in data && data.difficulty != undefined) {
                    this.difficulty = data.difficulty;
                }
                if ("thumbnail" in data && data.thumbnail != undefined) {
                    this.thumbnail = data.thumbnail;
                }
                if ("cover" in data && data.cover != undefined) {
                    this.cover = data.cover;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("audit" in data && data.audit != undefined) {
                    this.audit = data.audit;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_duration() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get difficulty() {
            return pb_1.Message.getFieldWithDefault(this, 6, Difficulty.EASY) as Difficulty;
        }
        set difficulty(value: Difficulty) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[1], value);
        }
        get has_difficulty() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get thumbnail() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set thumbnail(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[2], value);
        }
        get has_thumbnail() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get cover() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set cover(value: string) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[3], value);
        }
        get has_cover() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[4], value);
        }
        get has_category() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get metadata() {
            return pb_1.Message.getField(this, 11) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 11, value as any);
        }
        get audit() {
            return pb_1.Message.getWrapperField(this, Audit, 12) as Audit;
        }
        set audit(value: Audit) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_audit() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get _duration() {
            const cases: {
                [index: number]: "none" | "duration";
            } = {
                0: "none",
                5: "duration"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _difficulty() {
            const cases: {
                [index: number]: "none" | "difficulty";
            } = {
                0: "none",
                6: "difficulty"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _thumbnail() {
            const cases: {
                [index: number]: "none" | "thumbnail";
            } = {
                0: "none",
                7: "thumbnail"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _cover() {
            const cases: {
                [index: number]: "none" | "cover";
            } = {
                0: "none",
                8: "cover"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _category() {
            const cases: {
                [index: number]: "none" | "category";
            } = {
                0: "none",
                9: "category"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        static fromObject(data: {
            id?: string;
            user_id?: string;
            title?: string;
            description?: string;
            duration?: number;
            difficulty?: Difficulty;
            thumbnail?: string;
            cover?: string;
            category?: string;
            tags?: string[];
            metadata?: {
                [key: string]: string;
            };
            audit?: ReturnType<typeof Audit.prototype.toObject>;
        }): Quiz {
            const message = new Quiz({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.difficulty != null) {
                message.difficulty = data.difficulty;
            }
            if (data.thumbnail != null) {
                message.thumbnail = data.thumbnail;
            }
            if (data.cover != null) {
                message.cover = data.cover;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            if (data.audit != null) {
                message.audit = Audit.fromObject(data.audit);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                user_id?: string;
                title?: string;
                description?: string;
                duration?: number;
                difficulty?: Difficulty;
                thumbnail?: string;
                cover?: string;
                category?: string;
                tags?: string[];
                metadata?: {
                    [key: string]: string;
                };
                audit?: ReturnType<typeof Audit.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.difficulty != null) {
                data.difficulty = this.difficulty;
            }
            if (this.thumbnail != null) {
                data.thumbnail = this.thumbnail;
            }
            if (this.cover != null) {
                data.cover = this.cover;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            if (this.audit != null) {
                data.audit = this.audit.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.user_id.length)
                writer.writeString(2, this.user_id);
            if (this.title.length)
                writer.writeString(3, this.title);
            if (this.description.length)
                writer.writeString(4, this.description);
            if (this.has_duration)
                writer.writeUint64(5, this.duration);
            if (this.has_difficulty)
                writer.writeEnum(6, this.difficulty);
            if (this.has_thumbnail)
                writer.writeString(7, this.thumbnail);
            if (this.has_cover)
                writer.writeString(8, this.cover);
            if (this.has_category)
                writer.writeString(9, this.category);
            if (this.tags.length)
                writer.writeRepeatedString(10, this.tags);
            for (const [key, value] of this.metadata) {
                writer.writeMessage(11, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.has_audit)
                writer.writeMessage(12, this.audit, () => this.audit.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Quiz {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Quiz();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    case 3:
                        message.title = reader.readString();
                        break;
                    case 4:
                        message.description = reader.readString();
                        break;
                    case 5:
                        message.duration = reader.readUint64();
                        break;
                    case 6:
                        message.difficulty = reader.readEnum();
                        break;
                    case 7:
                        message.thumbnail = reader.readString();
                        break;
                    case 8:
                        message.cover = reader.readString();
                        break;
                    case 9:
                        message.category = reader.readString();
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readString());
                        break;
                    case 11:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    case 12:
                        reader.readMessage(message.audit, () => message.audit = Audit.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Quiz {
            return Quiz.deserialize(bytes);
        }
    }
    export class CreateQuizRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[3], [4], [5], [6]];
        constructor(data?: any[] | ({
            title?: string;
            description?: string;
            tags?: string[];
            metadata?: Map<string, string>;
        } & (({
            duration?: number;
        }) | ({
            thumbnail?: string;
        }) | ({
            cover?: string;
        }) | ({
            category?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("thumbnail" in data && data.thumbnail != undefined) {
                    this.thumbnail = data.thumbnail;
                }
                if ("cover" in data && data.cover != undefined) {
                    this.cover = data.cover;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_duration() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get thumbnail() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set thumbnail(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get has_thumbnail() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get cover() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set cover(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
        }
        get has_cover() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[3], value);
        }
        get has_category() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get metadata() {
            return pb_1.Message.getField(this, 8) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 8, value as any);
        }
        get _duration() {
            const cases: {
                [index: number]: "none" | "duration";
            } = {
                0: "none",
                3: "duration"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _thumbnail() {
            const cases: {
                [index: number]: "none" | "thumbnail";
            } = {
                0: "none",
                4: "thumbnail"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _cover() {
            const cases: {
                [index: number]: "none" | "cover";
            } = {
                0: "none",
                5: "cover"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _category() {
            const cases: {
                [index: number]: "none" | "category";
            } = {
                0: "none",
                6: "category"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        static fromObject(data: {
            title?: string;
            description?: string;
            duration?: number;
            thumbnail?: string;
            cover?: string;
            category?: string;
            tags?: string[];
            metadata?: {
                [key: string]: string;
            };
        }): CreateQuizRequest {
            const message = new CreateQuizRequest({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.thumbnail != null) {
                message.thumbnail = data.thumbnail;
            }
            if (data.cover != null) {
                message.cover = data.cover;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                description?: string;
                duration?: number;
                thumbnail?: string;
                cover?: string;
                category?: string;
                tags?: string[];
                metadata?: {
                    [key: string]: string;
                };
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.thumbnail != null) {
                data.thumbnail = this.thumbnail;
            }
            if (this.cover != null) {
                data.cover = this.cover;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.has_duration)
                writer.writeUint64(3, this.duration);
            if (this.has_thumbnail)
                writer.writeString(4, this.thumbnail);
            if (this.has_cover)
                writer.writeString(5, this.cover);
            if (this.has_category)
                writer.writeString(6, this.category);
            if (this.tags.length)
                writer.writeRepeatedString(7, this.tags);
            for (const [key, value] of this.metadata) {
                writer.writeMessage(8, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateQuizRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateQuizRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.duration = reader.readUint64();
                        break;
                    case 4:
                        message.thumbnail = reader.readString();
                        break;
                    case 5:
                        message.cover = reader.readString();
                        break;
                    case 6:
                        message.category = reader.readString();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateQuizRequest {
            return CreateQuizRequest.deserialize(bytes);
        }
    }
    export class CreateQuizResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz?: Quiz;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz" in data && data.quiz != undefined) {
                    this.quiz = data.quiz;
                }
            }
        }
        get quiz() {
            return pb_1.Message.getWrapperField(this, Quiz, 1) as Quiz;
        }
        set quiz(value: Quiz) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_quiz() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            quiz?: ReturnType<typeof Quiz.prototype.toObject>;
        }): CreateQuizResponse {
            const message = new CreateQuizResponse({});
            if (data.quiz != null) {
                message.quiz = Quiz.fromObject(data.quiz);
            }
            return message;
        }
        toObject() {
            const data: {
                quiz?: ReturnType<typeof Quiz.prototype.toObject>;
            } = {};
            if (this.quiz != null) {
                data.quiz = this.quiz.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_quiz)
                writer.writeMessage(1, this.quiz, () => this.quiz.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateQuizResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateQuizResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.quiz, () => message.quiz = Quiz.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateQuizResponse {
            return CreateQuizResponse.deserialize(bytes);
        }
    }
    export class GetQuizRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): GetQuizRequest {
            const message = new GetQuizRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetQuizRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetQuizRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetQuizRequest {
            return GetQuizRequest.deserialize(bytes);
        }
    }
    export class GetQuizResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz?: Quiz;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz" in data && data.quiz != undefined) {
                    this.quiz = data.quiz;
                }
            }
        }
        get quiz() {
            return pb_1.Message.getWrapperField(this, Quiz, 1) as Quiz;
        }
        set quiz(value: Quiz) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_quiz() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            quiz?: ReturnType<typeof Quiz.prototype.toObject>;
        }): GetQuizResponse {
            const message = new GetQuizResponse({});
            if (data.quiz != null) {
                message.quiz = Quiz.fromObject(data.quiz);
            }
            return message;
        }
        toObject() {
            const data: {
                quiz?: ReturnType<typeof Quiz.prototype.toObject>;
            } = {};
            if (this.quiz != null) {
                data.quiz = this.quiz.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_quiz)
                writer.writeMessage(1, this.quiz, () => this.quiz.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetQuizResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetQuizResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.quiz, () => message.quiz = Quiz.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetQuizResponse {
            return GetQuizResponse.deserialize(bytes);
        }
    }
    export class ListQuizRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({} & (({
            pagination?: Pagination;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, Pagination, 2) as Pagination;
        }
        set pagination(value: Pagination) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _pagination() {
            const cases: {
                [index: number]: "none" | "pagination";
            } = {
                0: "none",
                2: "pagination"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof Pagination.prototype.toObject>;
        }): ListQuizRequest {
            const message = new ListQuizRequest({});
            if (data.pagination != null) {
                message.pagination = Pagination.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof Pagination.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListQuizRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListQuizRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListQuizRequest {
            return ListQuizRequest.deserialize(bytes);
        }
    }
    export class ListQuizResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            quizzes?: Quiz[];
        } & (({
            pagination?: Pagination;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quizzes" in data && data.quizzes != undefined) {
                    this.quizzes = data.quizzes;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get quizzes() {
            return pb_1.Message.getRepeatedWrapperField(this, Quiz, 1) as Quiz[];
        }
        set quizzes(value: Quiz[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, Pagination, 2) as Pagination;
        }
        set pagination(value: Pagination) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _pagination() {
            const cases: {
                [index: number]: "none" | "pagination";
            } = {
                0: "none",
                2: "pagination"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            quizzes?: ReturnType<typeof Quiz.prototype.toObject>[];
            pagination?: ReturnType<typeof Pagination.prototype.toObject>;
        }): ListQuizResponse {
            const message = new ListQuizResponse({});
            if (data.quizzes != null) {
                message.quizzes = data.quizzes.map(item => Quiz.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = Pagination.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                quizzes?: ReturnType<typeof Quiz.prototype.toObject>[];
                pagination?: ReturnType<typeof Pagination.prototype.toObject>;
            } = {};
            if (this.quizzes != null) {
                data.quizzes = this.quizzes.map((item: Quiz) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quizzes.length)
                writer.writeRepeatedMessage(1, this.quizzes, (item: Quiz) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListQuizResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListQuizResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.quizzes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Quiz.deserialize(reader), Quiz));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListQuizResponse {
            return ListQuizResponse.deserialize(bytes);
        }
    }
    export class UpdateQuizRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [4], [5], [6], [7]];
        constructor(data?: any[] | ({
            id?: string;
            tags?: string[];
            metadata?: Map<string, string>;
        } & (({
            title?: string;
        }) | ({
            description?: string;
        }) | ({
            duration?: number;
        }) | ({
            thumbnail?: string;
        }) | ({
            cover?: string;
        }) | ({
            category?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("thumbnail" in data && data.thumbnail != undefined) {
                    this.thumbnail = data.thumbnail;
                }
                if ("cover" in data && data.cover != undefined) {
                    this.cover = data.cover;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
            if (!this.metadata)
                this.metadata = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_title() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_duration() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get thumbnail() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set thumbnail(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
        }
        get has_thumbnail() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get cover() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set cover(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[4], value);
        }
        get has_cover() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[5], value);
        }
        get has_category() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get metadata() {
            return pb_1.Message.getField(this, 9) as any as Map<string, string>;
        }
        set metadata(value: Map<string, string>) {
            pb_1.Message.setField(this, 9, value as any);
        }
        get _title() {
            const cases: {
                [index: number]: "none" | "title";
            } = {
                0: "none",
                2: "title"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _description() {
            const cases: {
                [index: number]: "none" | "description";
            } = {
                0: "none",
                3: "description"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _duration() {
            const cases: {
                [index: number]: "none" | "duration";
            } = {
                0: "none",
                4: "duration"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _thumbnail() {
            const cases: {
                [index: number]: "none" | "thumbnail";
            } = {
                0: "none",
                5: "thumbnail"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _cover() {
            const cases: {
                [index: number]: "none" | "cover";
            } = {
                0: "none",
                6: "cover"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _category() {
            const cases: {
                [index: number]: "none" | "category";
            } = {
                0: "none",
                7: "category"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            description?: string;
            duration?: number;
            thumbnail?: string;
            cover?: string;
            category?: string;
            tags?: string[];
            metadata?: {
                [key: string]: string;
            };
        }): UpdateQuizRequest {
            const message = new UpdateQuizRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.thumbnail != null) {
                message.thumbnail = data.thumbnail;
            }
            if (data.cover != null) {
                message.cover = data.cover;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (typeof data.metadata == "object") {
                message.metadata = new Map(Object.entries(data.metadata));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                description?: string;
                duration?: number;
                thumbnail?: string;
                cover?: string;
                category?: string;
                tags?: string[];
                metadata?: {
                    [key: string]: string;
                };
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.thumbnail != null) {
                data.thumbnail = this.thumbnail;
            }
            if (this.cover != null) {
                data.cover = this.cover;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.metadata != null) {
                data.metadata = (Object.fromEntries)(this.metadata);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.has_title)
                writer.writeString(2, this.title);
            if (this.has_description)
                writer.writeString(3, this.description);
            if (this.has_duration)
                writer.writeUint64(4, this.duration);
            if (this.has_thumbnail)
                writer.writeString(5, this.thumbnail);
            if (this.has_cover)
                writer.writeString(6, this.cover);
            if (this.has_category)
                writer.writeString(7, this.category);
            if (this.tags.length)
                writer.writeRepeatedString(8, this.tags);
            for (const [key, value] of this.metadata) {
                writer.writeMessage(9, this.metadata, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateQuizRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateQuizRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.duration = reader.readUint64();
                        break;
                    case 5:
                        message.thumbnail = reader.readString();
                        break;
                    case 6:
                        message.cover = reader.readString();
                        break;
                    case 7:
                        message.category = reader.readString();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metadata as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateQuizRequest {
            return UpdateQuizRequest.deserialize(bytes);
        }
    }
    export class UpdateQuizResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz?: Quiz;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz" in data && data.quiz != undefined) {
                    this.quiz = data.quiz;
                }
            }
        }
        get quiz() {
            return pb_1.Message.getWrapperField(this, Quiz, 1) as Quiz;
        }
        set quiz(value: Quiz) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_quiz() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            quiz?: ReturnType<typeof Quiz.prototype.toObject>;
        }): UpdateQuizResponse {
            const message = new UpdateQuizResponse({});
            if (data.quiz != null) {
                message.quiz = Quiz.fromObject(data.quiz);
            }
            return message;
        }
        toObject() {
            const data: {
                quiz?: ReturnType<typeof Quiz.prototype.toObject>;
            } = {};
            if (this.quiz != null) {
                data.quiz = this.quiz.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_quiz)
                writer.writeMessage(1, this.quiz, () => this.quiz.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateQuizResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateQuizResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.quiz, () => message.quiz = Quiz.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateQuizResponse {
            return UpdateQuizResponse.deserialize(bytes);
        }
    }
    export class DeleteQuizRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): DeleteQuizRequest {
            const message = new DeleteQuizRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteQuizRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteQuizRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteQuizRequest {
            return DeleteQuizRequest.deserialize(bytes);
        }
    }
    export class DeleteQuizResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): DeleteQuizResponse {
            const message = new DeleteQuizResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteQuizResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteQuizResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteQuizResponse {
            return DeleteQuizResponse.deserialize(bytes);
        }
    }
    export class SearchQuizRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            query?: string;
        } & (({
            pagination?: Pagination;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get query() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set query(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, Pagination, 2) as Pagination;
        }
        set pagination(value: Pagination) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _pagination() {
            const cases: {
                [index: number]: "none" | "pagination";
            } = {
                0: "none",
                2: "pagination"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            query?: string;
            pagination?: ReturnType<typeof Pagination.prototype.toObject>;
        }): SearchQuizRequest {
            const message = new SearchQuizRequest({});
            if (data.query != null) {
                message.query = data.query;
            }
            if (data.pagination != null) {
                message.pagination = Pagination.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                query?: string;
                pagination?: ReturnType<typeof Pagination.prototype.toObject>;
            } = {};
            if (this.query != null) {
                data.query = this.query;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.query.length)
                writer.writeString(1, this.query);
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchQuizRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchQuizRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.query = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchQuizRequest {
            return SearchQuizRequest.deserialize(bytes);
        }
    }
    export class SearchQuizResponse extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            quizzes?: Quiz[];
        } & (({
            pagination?: Pagination;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quizzes" in data && data.quizzes != undefined) {
                    this.quizzes = data.quizzes;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get quizzes() {
            return pb_1.Message.getRepeatedWrapperField(this, Quiz, 1) as Quiz[];
        }
        set quizzes(value: Quiz[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, Pagination, 2) as Pagination;
        }
        set pagination(value: Pagination) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _pagination() {
            const cases: {
                [index: number]: "none" | "pagination";
            } = {
                0: "none",
                2: "pagination"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            quizzes?: ReturnType<typeof Quiz.prototype.toObject>[];
            pagination?: ReturnType<typeof Pagination.prototype.toObject>;
        }): SearchQuizResponse {
            const message = new SearchQuizResponse({});
            if (data.quizzes != null) {
                message.quizzes = data.quizzes.map(item => Quiz.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = Pagination.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                quizzes?: ReturnType<typeof Quiz.prototype.toObject>[];
                pagination?: ReturnType<typeof Pagination.prototype.toObject>;
            } = {};
            if (this.quizzes != null) {
                data.quizzes = this.quizzes.map((item: Quiz) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quizzes.length)
                writer.writeRepeatedMessage(1, this.quizzes, (item: Quiz) => item.serialize(writer));
            if (this.has_pagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchQuizResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchQuizResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.quizzes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Quiz.deserialize(reader), Quiz));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchQuizResponse {
            return SearchQuizResponse.deserialize(bytes);
        }
    }
    export class AddQuestionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question?: string;
            difficulty?: Difficulty;
            order?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question" in data && data.question != undefined) {
                    this.question = data.question;
                }
                if ("difficulty" in data && data.difficulty != undefined) {
                    this.difficulty = data.difficulty;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get difficulty() {
            return pb_1.Message.getFieldWithDefault(this, 5, Difficulty.EASY) as Difficulty;
        }
        set difficulty(value: Difficulty) {
            pb_1.Message.setField(this, 5, value);
        }
        get order() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set order(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            quiz_id?: string;
            question?: string;
            difficulty?: Difficulty;
            order?: number;
        }): AddQuestionRequest {
            const message = new AddQuestionRequest({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question != null) {
                message.question = data.question;
            }
            if (data.difficulty != null) {
                message.difficulty = data.difficulty;
            }
            if (data.order != null) {
                message.order = data.order;
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question?: string;
                difficulty?: Difficulty;
                order?: number;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question != null) {
                data.question = this.question;
            }
            if (this.difficulty != null) {
                data.difficulty = this.difficulty;
            }
            if (this.order != null) {
                data.order = this.order;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question.length)
                writer.writeString(2, this.question);
            if (this.difficulty != Difficulty.EASY)
                writer.writeEnum(5, this.difficulty);
            if (this.order != 0)
                writer.writeFloat(6, this.order);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddQuestionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddQuestionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question = reader.readString();
                        break;
                    case 5:
                        message.difficulty = reader.readEnum();
                        break;
                    case 6:
                        message.order = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddQuestionRequest {
            return AddQuestionRequest.deserialize(bytes);
        }
    }
    export class AddQuestionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question?: QuizQuestion;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question" in data && data.question != undefined) {
                    this.question = data.question;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question() {
            return pb_1.Message.getWrapperField(this, QuizQuestion, 2) as QuizQuestion;
        }
        set question(value: QuizQuestion) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_question() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            quiz_id?: string;
            question?: ReturnType<typeof QuizQuestion.prototype.toObject>;
        }): AddQuestionResponse {
            const message = new AddQuestionResponse({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question != null) {
                message.question = QuizQuestion.fromObject(data.question);
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question?: ReturnType<typeof QuizQuestion.prototype.toObject>;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question != null) {
                data.question = this.question.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.has_question)
                writer.writeMessage(2, this.question, () => this.question.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddQuestionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddQuestionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.question, () => message.question = QuizQuestion.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddQuestionResponse {
            return AddQuestionResponse.deserialize(bytes);
        }
    }
    export class UpdateQuestionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question_id?: string;
            question?: QuizQuestion;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
                if ("question" in data && data.question != undefined) {
                    this.question = data.question;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get question() {
            return pb_1.Message.getWrapperField(this, QuizQuestion, 3) as QuizQuestion;
        }
        set question(value: QuizQuestion) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_question() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            quiz_id?: string;
            question_id?: string;
            question?: ReturnType<typeof QuizQuestion.prototype.toObject>;
        }): UpdateQuestionRequest {
            const message = new UpdateQuestionRequest({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            if (data.question != null) {
                message.question = QuizQuestion.fromObject(data.question);
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question_id?: string;
                question?: ReturnType<typeof QuizQuestion.prototype.toObject>;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            if (this.question != null) {
                data.question = this.question.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question_id.length)
                writer.writeString(2, this.question_id);
            if (this.has_question)
                writer.writeMessage(3, this.question, () => this.question.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateQuestionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateQuestionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.question, () => message.question = QuizQuestion.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateQuestionRequest {
            return UpdateQuestionRequest.deserialize(bytes);
        }
    }
    export class UpdateQuestionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question_id?: string;
            question?: QuizQuestion;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
                if ("question" in data && data.question != undefined) {
                    this.question = data.question;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get question() {
            return pb_1.Message.getWrapperField(this, QuizQuestion, 3) as QuizQuestion;
        }
        set question(value: QuizQuestion) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_question() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            quiz_id?: string;
            question_id?: string;
            question?: ReturnType<typeof QuizQuestion.prototype.toObject>;
        }): UpdateQuestionResponse {
            const message = new UpdateQuestionResponse({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            if (data.question != null) {
                message.question = QuizQuestion.fromObject(data.question);
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question_id?: string;
                question?: ReturnType<typeof QuizQuestion.prototype.toObject>;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            if (this.question != null) {
                data.question = this.question.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question_id.length)
                writer.writeString(2, this.question_id);
            if (this.has_question)
                writer.writeMessage(3, this.question, () => this.question.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateQuestionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateQuestionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.question, () => message.question = QuizQuestion.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateQuestionResponse {
            return UpdateQuestionResponse.deserialize(bytes);
        }
    }
    export class DeleteQuestionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            quiz_id?: string;
            question_id?: string;
        }): DeleteQuestionRequest {
            const message = new DeleteQuestionRequest({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question_id?: string;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question_id.length)
                writer.writeString(2, this.question_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteQuestionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteQuestionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteQuestionRequest {
            return DeleteQuestionRequest.deserialize(bytes);
        }
    }
    export class DeleteQuestionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            quiz_id?: string;
        }): DeleteQuestionResponse {
            const message = new DeleteQuestionResponse({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteQuestionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteQuestionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteQuestionResponse {
            return DeleteQuestionResponse.deserialize(bytes);
        }
    }
    export class ListQuestionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            quiz_id?: string;
        }): ListQuestionRequest {
            const message = new ListQuestionRequest({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListQuestionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListQuestionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListQuestionRequest {
            return ListQuestionRequest.deserialize(bytes);
        }
    }
    export class ListQuestionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            questions?: QuizQuestion[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("questions" in data && data.questions != undefined) {
                    this.questions = data.questions;
                }
            }
        }
        get questions() {
            return pb_1.Message.getRepeatedWrapperField(this, QuizQuestion, 1) as QuizQuestion[];
        }
        set questions(value: QuizQuestion[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            questions?: ReturnType<typeof QuizQuestion.prototype.toObject>[];
        }): ListQuestionResponse {
            const message = new ListQuestionResponse({});
            if (data.questions != null) {
                message.questions = data.questions.map(item => QuizQuestion.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                questions?: ReturnType<typeof QuizQuestion.prototype.toObject>[];
            } = {};
            if (this.questions != null) {
                data.questions = this.questions.map((item: QuizQuestion) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.questions.length)
                writer.writeRepeatedMessage(1, this.questions, (item: QuizQuestion) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListQuestionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListQuestionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.questions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, QuizQuestion.deserialize(reader), QuizQuestion));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListQuestionResponse {
            return ListQuestionResponse.deserialize(bytes);
        }
    }
    export class CreateChoiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question_id?: string;
            choice?: string;
            order?: number;
            is_correct?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
                if ("choice" in data && data.choice != undefined) {
                    this.choice = data.choice;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
                if ("is_correct" in data && data.is_correct != undefined) {
                    this.is_correct = data.is_correct;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get choice() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set choice(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get order() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set order(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get is_correct() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set is_correct(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            quiz_id?: string;
            question_id?: string;
            choice?: string;
            order?: number;
            is_correct?: boolean;
        }): CreateChoiceRequest {
            const message = new CreateChoiceRequest({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            if (data.choice != null) {
                message.choice = data.choice;
            }
            if (data.order != null) {
                message.order = data.order;
            }
            if (data.is_correct != null) {
                message.is_correct = data.is_correct;
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question_id?: string;
                choice?: string;
                order?: number;
                is_correct?: boolean;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            if (this.choice != null) {
                data.choice = this.choice;
            }
            if (this.order != null) {
                data.order = this.order;
            }
            if (this.is_correct != null) {
                data.is_correct = this.is_correct;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question_id.length)
                writer.writeString(2, this.question_id);
            if (this.choice.length)
                writer.writeString(3, this.choice);
            if (this.order != 0)
                writer.writeFloat(4, this.order);
            if (this.is_correct != false)
                writer.writeBool(5, this.is_correct);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateChoiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateChoiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question_id = reader.readString();
                        break;
                    case 3:
                        message.choice = reader.readString();
                        break;
                    case 4:
                        message.order = reader.readFloat();
                        break;
                    case 5:
                        message.is_correct = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateChoiceRequest {
            return CreateChoiceRequest.deserialize(bytes);
        }
    }
    export class CreateChoiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question_id?: string;
            choice?: Choice;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
                if ("choice" in data && data.choice != undefined) {
                    this.choice = data.choice;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get choice() {
            return pb_1.Message.getWrapperField(this, Choice, 3) as Choice;
        }
        set choice(value: Choice) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_choice() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            quiz_id?: string;
            question_id?: string;
            choice?: ReturnType<typeof Choice.prototype.toObject>;
        }): CreateChoiceResponse {
            const message = new CreateChoiceResponse({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            if (data.choice != null) {
                message.choice = Choice.fromObject(data.choice);
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question_id?: string;
                choice?: ReturnType<typeof Choice.prototype.toObject>;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            if (this.choice != null) {
                data.choice = this.choice.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question_id.length)
                writer.writeString(2, this.question_id);
            if (this.has_choice)
                writer.writeMessage(3, this.choice, () => this.choice.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateChoiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateChoiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.choice, () => message.choice = Choice.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateChoiceResponse {
            return CreateChoiceResponse.deserialize(bytes);
        }
    }
    export class UpdateChoiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question_id?: string;
            choice_id?: string;
            choice?: string;
            order?: number;
            is_correct?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
                if ("choice_id" in data && data.choice_id != undefined) {
                    this.choice_id = data.choice_id;
                }
                if ("choice" in data && data.choice != undefined) {
                    this.choice = data.choice;
                }
                if ("order" in data && data.order != undefined) {
                    this.order = data.order;
                }
                if ("is_correct" in data && data.is_correct != undefined) {
                    this.is_correct = data.is_correct;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get choice_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set choice_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get choice() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set choice(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get order() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set order(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get is_correct() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set is_correct(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            quiz_id?: string;
            question_id?: string;
            choice_id?: string;
            choice?: string;
            order?: number;
            is_correct?: boolean;
        }): UpdateChoiceRequest {
            const message = new UpdateChoiceRequest({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            if (data.choice_id != null) {
                message.choice_id = data.choice_id;
            }
            if (data.choice != null) {
                message.choice = data.choice;
            }
            if (data.order != null) {
                message.order = data.order;
            }
            if (data.is_correct != null) {
                message.is_correct = data.is_correct;
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question_id?: string;
                choice_id?: string;
                choice?: string;
                order?: number;
                is_correct?: boolean;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            if (this.choice_id != null) {
                data.choice_id = this.choice_id;
            }
            if (this.choice != null) {
                data.choice = this.choice;
            }
            if (this.order != null) {
                data.order = this.order;
            }
            if (this.is_correct != null) {
                data.is_correct = this.is_correct;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question_id.length)
                writer.writeString(2, this.question_id);
            if (this.choice_id.length)
                writer.writeString(3, this.choice_id);
            if (this.choice.length)
                writer.writeString(4, this.choice);
            if (this.order != 0)
                writer.writeFloat(5, this.order);
            if (this.is_correct != false)
                writer.writeBool(6, this.is_correct);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateChoiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateChoiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question_id = reader.readString();
                        break;
                    case 3:
                        message.choice_id = reader.readString();
                        break;
                    case 4:
                        message.choice = reader.readString();
                        break;
                    case 5:
                        message.order = reader.readFloat();
                        break;
                    case 6:
                        message.is_correct = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateChoiceRequest {
            return UpdateChoiceRequest.deserialize(bytes);
        }
    }
    export class UpdateChoiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question_id?: string;
            choice_id?: string;
            choice?: Choice;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
                if ("choice_id" in data && data.choice_id != undefined) {
                    this.choice_id = data.choice_id;
                }
                if ("choice" in data && data.choice != undefined) {
                    this.choice = data.choice;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get choice_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set choice_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get choice() {
            return pb_1.Message.getWrapperField(this, Choice, 4) as Choice;
        }
        set choice(value: Choice) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_choice() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            quiz_id?: string;
            question_id?: string;
            choice_id?: string;
            choice?: ReturnType<typeof Choice.prototype.toObject>;
        }): UpdateChoiceResponse {
            const message = new UpdateChoiceResponse({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            if (data.choice_id != null) {
                message.choice_id = data.choice_id;
            }
            if (data.choice != null) {
                message.choice = Choice.fromObject(data.choice);
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question_id?: string;
                choice_id?: string;
                choice?: ReturnType<typeof Choice.prototype.toObject>;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            if (this.choice_id != null) {
                data.choice_id = this.choice_id;
            }
            if (this.choice != null) {
                data.choice = this.choice.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question_id.length)
                writer.writeString(2, this.question_id);
            if (this.choice_id.length)
                writer.writeString(3, this.choice_id);
            if (this.has_choice)
                writer.writeMessage(4, this.choice, () => this.choice.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateChoiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateChoiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question_id = reader.readString();
                        break;
                    case 3:
                        message.choice_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.choice, () => message.choice = Choice.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateChoiceResponse {
            return UpdateChoiceResponse.deserialize(bytes);
        }
    }
    export class DeleteChoiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question_id?: string;
            choice_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
                if ("choice_id" in data && data.choice_id != undefined) {
                    this.choice_id = data.choice_id;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get choice_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set choice_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            quiz_id?: string;
            question_id?: string;
            choice_id?: string;
        }): DeleteChoiceRequest {
            const message = new DeleteChoiceRequest({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            if (data.choice_id != null) {
                message.choice_id = data.choice_id;
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question_id?: string;
                choice_id?: string;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            if (this.choice_id != null) {
                data.choice_id = this.choice_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question_id.length)
                writer.writeString(2, this.question_id);
            if (this.choice_id.length)
                writer.writeString(3, this.choice_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteChoiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteChoiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question_id = reader.readString();
                        break;
                    case 3:
                        message.choice_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteChoiceRequest {
            return DeleteChoiceRequest.deserialize(bytes);
        }
    }
    export class DeleteChoiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            quiz_id?: string;
        }): DeleteChoiceResponse {
            const message = new DeleteChoiceResponse({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteChoiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteChoiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteChoiceResponse {
            return DeleteChoiceResponse.deserialize(bytes);
        }
    }
    export class ListChoiceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            quiz_id?: string;
            question_id?: string;
        }): ListChoiceRequest {
            const message = new ListChoiceRequest({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question_id?: string;
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question_id.length)
                writer.writeString(2, this.question_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListChoiceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListChoiceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListChoiceRequest {
            return ListChoiceRequest.deserialize(bytes);
        }
    }
    export class ListChoiceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            choices?: Choice[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("choices" in data && data.choices != undefined) {
                    this.choices = data.choices;
                }
            }
        }
        get choices() {
            return pb_1.Message.getRepeatedWrapperField(this, Choice, 1) as Choice[];
        }
        set choices(value: Choice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            choices?: ReturnType<typeof Choice.prototype.toObject>[];
        }): ListChoiceResponse {
            const message = new ListChoiceResponse({});
            if (data.choices != null) {
                message.choices = data.choices.map(item => Choice.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                choices?: ReturnType<typeof Choice.prototype.toObject>[];
            } = {};
            if (this.choices != null) {
                data.choices = this.choices.map((item: Choice) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.choices.length)
                writer.writeRepeatedMessage(1, this.choices, (item: Choice) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListChoiceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListChoiceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.choices, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Choice.deserialize(reader), Choice));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListChoiceResponse {
            return ListChoiceResponse.deserialize(bytes);
        }
    }
    export class AnswerResult extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            answer?: string;
            is_correct?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("answer" in data && data.answer != undefined) {
                    this.answer = data.answer;
                }
                if ("is_correct" in data && data.is_correct != undefined) {
                    this.is_correct = data.is_correct;
                }
            }
        }
        get answer() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set answer(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_correct() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_correct(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            answer?: string;
            is_correct?: boolean;
        }): AnswerResult {
            const message = new AnswerResult({});
            if (data.answer != null) {
                message.answer = data.answer;
            }
            if (data.is_correct != null) {
                message.is_correct = data.is_correct;
            }
            return message;
        }
        toObject() {
            const data: {
                answer?: string;
                is_correct?: boolean;
            } = {};
            if (this.answer != null) {
                data.answer = this.answer;
            }
            if (this.is_correct != null) {
                data.is_correct = this.is_correct;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.answer.length)
                writer.writeString(1, this.answer);
            if (this.is_correct != false)
                writer.writeBool(2, this.is_correct);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnswerResult {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnswerResult();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.answer = reader.readString();
                        break;
                    case 2:
                        message.is_correct = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AnswerResult {
            return AnswerResult.deserialize(bytes);
        }
    }
    export class ValidateQuestionAnswersRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quiz_id?: string;
            question_id?: string;
            answers?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quiz_id" in data && data.quiz_id != undefined) {
                    this.quiz_id = data.quiz_id;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
                if ("answers" in data && data.answers != undefined) {
                    this.answers = data.answers;
                }
            }
        }
        get quiz_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set quiz_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get question_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get answers() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set answers(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            quiz_id?: string;
            question_id?: string;
            answers?: string[];
        }): ValidateQuestionAnswersRequest {
            const message = new ValidateQuestionAnswersRequest({});
            if (data.quiz_id != null) {
                message.quiz_id = data.quiz_id;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            if (data.answers != null) {
                message.answers = data.answers;
            }
            return message;
        }
        toObject() {
            const data: {
                quiz_id?: string;
                question_id?: string;
                answers?: string[];
            } = {};
            if (this.quiz_id != null) {
                data.quiz_id = this.quiz_id;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            if (this.answers != null) {
                data.answers = this.answers;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quiz_id.length)
                writer.writeString(1, this.quiz_id);
            if (this.question_id.length)
                writer.writeString(2, this.question_id);
            if (this.answers.length)
                writer.writeRepeatedString(3, this.answers);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateQuestionAnswersRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateQuestionAnswersRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quiz_id = reader.readString();
                        break;
                    case 2:
                        message.question_id = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateQuestionAnswersRequest {
            return ValidateQuestionAnswersRequest.deserialize(bytes);
        }
    }
    export class ValidateQuestionAnswersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            results?: AnswerResult[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("results" in data && data.results != undefined) {
                    this.results = data.results;
                }
            }
        }
        get results() {
            return pb_1.Message.getRepeatedWrapperField(this, AnswerResult, 1) as AnswerResult[];
        }
        set results(value: AnswerResult[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            results?: ReturnType<typeof AnswerResult.prototype.toObject>[];
        }): ValidateQuestionAnswersResponse {
            const message = new ValidateQuestionAnswersResponse({});
            if (data.results != null) {
                message.results = data.results.map(item => AnswerResult.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                results?: ReturnType<typeof AnswerResult.prototype.toObject>[];
            } = {};
            if (this.results != null) {
                data.results = this.results.map((item: AnswerResult) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.results.length)
                writer.writeRepeatedMessage(1, this.results, (item: AnswerResult) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateQuestionAnswersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateQuestionAnswersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, AnswerResult.deserialize(reader), AnswerResult));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateQuestionAnswersResponse {
            return ValidateQuestionAnswersResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQuizzesService {
        static definition = {
            CreateQuiz: {
                path: "/quiz.v1.Quizzes/CreateQuiz",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateQuizRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateQuizRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateQuizResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateQuizResponse.deserialize(new Uint8Array(bytes))
            },
            GetQuiz: {
                path: "/quiz.v1.Quizzes/GetQuiz",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetQuizRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetQuizRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetQuizResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetQuizResponse.deserialize(new Uint8Array(bytes))
            },
            ListQuiz: {
                path: "/quiz.v1.Quizzes/ListQuiz",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListQuizRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListQuizRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListQuizResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListQuizResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateQuiz: {
                path: "/quiz.v1.Quizzes/UpdateQuiz",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateQuizRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateQuizRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateQuizResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateQuizResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteQuiz: {
                path: "/quiz.v1.Quizzes/DeleteQuiz",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteQuizRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteQuizRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteQuizResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteQuizResponse.deserialize(new Uint8Array(bytes))
            },
            SearchQuiz: {
                path: "/quiz.v1.Quizzes/SearchQuiz",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchQuizRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchQuizRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SearchQuizResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SearchQuizResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateQuiz(call: grpc_1.ServerUnaryCall<CreateQuizRequest, CreateQuizResponse>, callback: grpc_1.sendUnaryData<CreateQuizResponse>): void;
        abstract GetQuiz(call: grpc_1.ServerUnaryCall<GetQuizRequest, GetQuizResponse>, callback: grpc_1.sendUnaryData<GetQuizResponse>): void;
        abstract ListQuiz(call: grpc_1.ServerUnaryCall<ListQuizRequest, ListQuizResponse>, callback: grpc_1.sendUnaryData<ListQuizResponse>): void;
        abstract UpdateQuiz(call: grpc_1.ServerUnaryCall<UpdateQuizRequest, UpdateQuizResponse>, callback: grpc_1.sendUnaryData<UpdateQuizResponse>): void;
        abstract DeleteQuiz(call: grpc_1.ServerUnaryCall<DeleteQuizRequest, DeleteQuizResponse>, callback: grpc_1.sendUnaryData<DeleteQuizResponse>): void;
        abstract SearchQuiz(call: grpc_1.ServerUnaryCall<SearchQuizRequest, SearchQuizResponse>, callback: grpc_1.sendUnaryData<SearchQuizResponse>): void;
    }
    export class QuizzesClient extends grpc_1.makeGenericClientConstructor(UnimplementedQuizzesService.definition, "Quizzes", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateQuiz: GrpcUnaryServiceInterface<CreateQuizRequest, CreateQuizResponse> = (message: CreateQuizRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateQuizResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateQuizResponse>, callback?: grpc_1.requestCallback<CreateQuizResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateQuiz(message, metadata, options, callback);
        };
        GetQuiz: GrpcUnaryServiceInterface<GetQuizRequest, GetQuizResponse> = (message: GetQuizRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetQuizResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetQuizResponse>, callback?: grpc_1.requestCallback<GetQuizResponse>): grpc_1.ClientUnaryCall => {
            return super.GetQuiz(message, metadata, options, callback);
        };
        ListQuiz: GrpcUnaryServiceInterface<ListQuizRequest, ListQuizResponse> = (message: ListQuizRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListQuizResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListQuizResponse>, callback?: grpc_1.requestCallback<ListQuizResponse>): grpc_1.ClientUnaryCall => {
            return super.ListQuiz(message, metadata, options, callback);
        };
        UpdateQuiz: GrpcUnaryServiceInterface<UpdateQuizRequest, UpdateQuizResponse> = (message: UpdateQuizRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateQuizResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateQuizResponse>, callback?: grpc_1.requestCallback<UpdateQuizResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateQuiz(message, metadata, options, callback);
        };
        DeleteQuiz: GrpcUnaryServiceInterface<DeleteQuizRequest, DeleteQuizResponse> = (message: DeleteQuizRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteQuizResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteQuizResponse>, callback?: grpc_1.requestCallback<DeleteQuizResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteQuiz(message, metadata, options, callback);
        };
        SearchQuiz: GrpcUnaryServiceInterface<SearchQuizRequest, SearchQuizResponse> = (message: SearchQuizRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SearchQuizResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SearchQuizResponse>, callback?: grpc_1.requestCallback<SearchQuizResponse>): grpc_1.ClientUnaryCall => {
            return super.SearchQuiz(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedQuizQuestionsService {
        static definition = {
            AddQuestion: {
                path: "/quiz.v1.QuizQuestions/AddQuestion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AddQuestionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AddQuestionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AddQuestionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AddQuestionResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateQuestion: {
                path: "/quiz.v1.QuizQuestions/UpdateQuestion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateQuestionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateQuestionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateQuestionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateQuestionResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteQuestion: {
                path: "/quiz.v1.QuizQuestions/DeleteQuestion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteQuestionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteQuestionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteQuestionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteQuestionResponse.deserialize(new Uint8Array(bytes))
            },
            ListQuestion: {
                path: "/quiz.v1.QuizQuestions/ListQuestion",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListQuestionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListQuestionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListQuestionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListQuestionResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract AddQuestion(call: grpc_1.ServerUnaryCall<AddQuestionRequest, AddQuestionResponse>, callback: grpc_1.sendUnaryData<AddQuestionResponse>): void;
        abstract UpdateQuestion(call: grpc_1.ServerUnaryCall<UpdateQuestionRequest, UpdateQuestionResponse>, callback: grpc_1.sendUnaryData<UpdateQuestionResponse>): void;
        abstract DeleteQuestion(call: grpc_1.ServerUnaryCall<DeleteQuestionRequest, DeleteQuestionResponse>, callback: grpc_1.sendUnaryData<DeleteQuestionResponse>): void;
        abstract ListQuestion(call: grpc_1.ServerUnaryCall<ListQuestionRequest, ListQuestionResponse>, callback: grpc_1.sendUnaryData<ListQuestionResponse>): void;
    }
    export class QuizQuestionsClient extends grpc_1.makeGenericClientConstructor(UnimplementedQuizQuestionsService.definition, "QuizQuestions", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        AddQuestion: GrpcUnaryServiceInterface<AddQuestionRequest, AddQuestionResponse> = (message: AddQuestionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AddQuestionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AddQuestionResponse>, callback?: grpc_1.requestCallback<AddQuestionResponse>): grpc_1.ClientUnaryCall => {
            return super.AddQuestion(message, metadata, options, callback);
        };
        UpdateQuestion: GrpcUnaryServiceInterface<UpdateQuestionRequest, UpdateQuestionResponse> = (message: UpdateQuestionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateQuestionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateQuestionResponse>, callback?: grpc_1.requestCallback<UpdateQuestionResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateQuestion(message, metadata, options, callback);
        };
        DeleteQuestion: GrpcUnaryServiceInterface<DeleteQuestionRequest, DeleteQuestionResponse> = (message: DeleteQuestionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteQuestionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteQuestionResponse>, callback?: grpc_1.requestCallback<DeleteQuestionResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteQuestion(message, metadata, options, callback);
        };
        ListQuestion: GrpcUnaryServiceInterface<ListQuestionRequest, ListQuestionResponse> = (message: ListQuestionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListQuestionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListQuestionResponse>, callback?: grpc_1.requestCallback<ListQuestionResponse>): grpc_1.ClientUnaryCall => {
            return super.ListQuestion(message, metadata, options, callback);
        };
    }
    export abstract class UnimplementedQuizAnswersService {
        static definition = {
            ValidateQuestionAnswers: {
                path: "/quiz.v1.QuizAnswers/ValidateQuestionAnswers",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ValidateQuestionAnswersRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ValidateQuestionAnswersRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ValidateQuestionAnswersResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ValidateQuestionAnswersResponse.deserialize(new Uint8Array(bytes))
            },
            CreateChoice: {
                path: "/quiz.v1.QuizAnswers/CreateChoice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateChoiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateChoiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateChoiceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateChoiceResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateChoice: {
                path: "/quiz.v1.QuizAnswers/UpdateChoice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateChoiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateChoiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateChoiceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateChoiceResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteChoice: {
                path: "/quiz.v1.QuizAnswers/DeleteChoice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteChoiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteChoiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteChoiceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteChoiceResponse.deserialize(new Uint8Array(bytes))
            },
            ListChoice: {
                path: "/quiz.v1.QuizAnswers/ListChoice",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListChoiceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListChoiceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListChoiceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListChoiceResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ValidateQuestionAnswers(call: grpc_1.ServerUnaryCall<ValidateQuestionAnswersRequest, ValidateQuestionAnswersResponse>, callback: grpc_1.sendUnaryData<ValidateQuestionAnswersResponse>): void;
        abstract CreateChoice(call: grpc_1.ServerUnaryCall<CreateChoiceRequest, CreateChoiceResponse>, callback: grpc_1.sendUnaryData<CreateChoiceResponse>): void;
        abstract UpdateChoice(call: grpc_1.ServerUnaryCall<UpdateChoiceRequest, UpdateChoiceResponse>, callback: grpc_1.sendUnaryData<UpdateChoiceResponse>): void;
        abstract DeleteChoice(call: grpc_1.ServerUnaryCall<DeleteChoiceRequest, DeleteChoiceResponse>, callback: grpc_1.sendUnaryData<DeleteChoiceResponse>): void;
        abstract ListChoice(call: grpc_1.ServerUnaryCall<ListChoiceRequest, ListChoiceResponse>, callback: grpc_1.sendUnaryData<ListChoiceResponse>): void;
    }
    export class QuizAnswersClient extends grpc_1.makeGenericClientConstructor(UnimplementedQuizAnswersService.definition, "QuizAnswers", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ValidateQuestionAnswers: GrpcUnaryServiceInterface<ValidateQuestionAnswersRequest, ValidateQuestionAnswersResponse> = (message: ValidateQuestionAnswersRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ValidateQuestionAnswersResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ValidateQuestionAnswersResponse>, callback?: grpc_1.requestCallback<ValidateQuestionAnswersResponse>): grpc_1.ClientUnaryCall => {
            return super.ValidateQuestionAnswers(message, metadata, options, callback);
        };
        CreateChoice: GrpcUnaryServiceInterface<CreateChoiceRequest, CreateChoiceResponse> = (message: CreateChoiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateChoiceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateChoiceResponse>, callback?: grpc_1.requestCallback<CreateChoiceResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateChoice(message, metadata, options, callback);
        };
        UpdateChoice: GrpcUnaryServiceInterface<UpdateChoiceRequest, UpdateChoiceResponse> = (message: UpdateChoiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateChoiceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateChoiceResponse>, callback?: grpc_1.requestCallback<UpdateChoiceResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateChoice(message, metadata, options, callback);
        };
        DeleteChoice: GrpcUnaryServiceInterface<DeleteChoiceRequest, DeleteChoiceResponse> = (message: DeleteChoiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteChoiceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteChoiceResponse>, callback?: grpc_1.requestCallback<DeleteChoiceResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteChoice(message, metadata, options, callback);
        };
        ListChoice: GrpcUnaryServiceInterface<ListChoiceRequest, ListChoiceResponse> = (message: ListChoiceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListChoiceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListChoiceResponse>, callback?: grpc_1.requestCallback<ListChoiceResponse>): grpc_1.ClientUnaryCall => {
            return super.ListChoice(message, metadata, options, callback);
        };
    }
}
