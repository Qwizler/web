/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as QuizesImport } from './routes/quizes'
import { Route as IndexImport } from './routes/index'
import { Route as QCreateImport } from './routes/q/create'
import { Route as QQuizIdImport } from './routes/q/$quizId'

// Create/Update Routes

const QuizesRoute = QuizesImport.update({
  id: '/quizes',
  path: '/quizes',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const QCreateRoute = QCreateImport.update({
  id: '/q/create',
  path: '/q/create',
  getParentRoute: () => rootRoute,
} as any)

const QQuizIdRoute = QQuizIdImport.update({
  id: '/q/$quizId',
  path: '/q/$quizId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/quizes': {
      id: '/quizes'
      path: '/quizes'
      fullPath: '/quizes'
      preLoaderRoute: typeof QuizesImport
      parentRoute: typeof rootRoute
    }
    '/q/$quizId': {
      id: '/q/$quizId'
      path: '/q/$quizId'
      fullPath: '/q/$quizId'
      preLoaderRoute: typeof QQuizIdImport
      parentRoute: typeof rootRoute
    }
    '/q/create': {
      id: '/q/create'
      path: '/q/create'
      fullPath: '/q/create'
      preLoaderRoute: typeof QCreateImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/quizes': typeof QuizesRoute
  '/q/$quizId': typeof QQuizIdRoute
  '/q/create': typeof QCreateRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/quizes': typeof QuizesRoute
  '/q/$quizId': typeof QQuizIdRoute
  '/q/create': typeof QCreateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/quizes': typeof QuizesRoute
  '/q/$quizId': typeof QQuizIdRoute
  '/q/create': typeof QCreateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/quizes' | '/q/$quizId' | '/q/create'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/quizes' | '/q/$quizId' | '/q/create'
  id: '__root__' | '/' | '/quizes' | '/q/$quizId' | '/q/create'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  QuizesRoute: typeof QuizesRoute
  QQuizIdRoute: typeof QQuizIdRoute
  QCreateRoute: typeof QCreateRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  QuizesRoute: QuizesRoute,
  QQuizIdRoute: QQuizIdRoute,
  QCreateRoute: QCreateRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/quizes",
        "/q/$quizId",
        "/q/create"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/quizes": {
      "filePath": "quizes.tsx"
    },
    "/q/$quizId": {
      "filePath": "q/$quizId.tsx"
    },
    "/q/create": {
      "filePath": "q/create.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
